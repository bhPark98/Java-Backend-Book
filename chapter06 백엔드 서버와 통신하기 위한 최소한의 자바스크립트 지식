* 자바스크립트는 어떤 언어일까?

자바스크립트는 자바와 비슷하면서도 다른 언어이다. 두 언어 모두 C 언어로부터 영향을 받았기 때문에 비슷한 문법을 가지고 있지만, 자바는 컴파일언어, 자바스크립트는 인터프리터 언어이므로 다르다.

* 컴파일 언어와 인터프리터 언어
프로그래밍 언어는 크게 컴파일 언어와 인터프리터 언어로 나눌 수 있다. 컴파일 언어에는 프로그래밍 언어로 작성된 소스코드를 컴파일 하는 과정이 있다. 컴파일된 결과물은 기계에 의해 실행될 수 있는 상태가 되는데, 이것이 '실행 파일'이다.
실행 파일은 윈도우나 리눅스 등의 운영체제별로 종류가 다르기 때문에 서로 다른 운영체제에서는 실행이 불가능하다.
반면, 인터프리터 언어는 컴파일이라는 과정이 없어 실행파일이 아닌 소스코드가 그대로 사용자에게 전달되며, 이 소스코드가 한 줄씩 그대로 실행된다.
따라서 컴파일 언어는 컴파일 과정에서 문법적인 에러를 체크할 수 있지만, 인터프리터 언어는 실행 시점이 되어서야 체크된다는 이유로 컴파일 언어가 더 안정적이라는 시각도 있다. 그러나 인터프리터 언어도 이런 문제를 보완할 만한 많은 수단들을 가지고 있다.

* 자바스크립트 문법
1. 변수와 상수의 선언과 사용

자바스크립트에서는 'let'이라는 키워드로 변수를 선언할 수 있다. ex) let a = 1;  let b = "자바스크립트";
자바스크립트는 변수에 타입이 없으므로 모든 변수는 단지 let이라는 키워드와 함께 선언하면 된다.
위 코드를 콘솔에서 실행하기 위해 한 줄 입력하고 enter키를 누르면 undefined라는 코드의 결괏값이 출력되는데, 이유는 변수를 선언하고 초기화하는 코드가 결괏값이 없기 때문이다. 반면, 결괏값이 있는 수 연산 '3+5'를 입력하면 8이라는 결괏값을 확인할 수 있다.

변수를 선언하며 타입을 지정하지 않았다고 해서 타입 자체가 존재하지 않는 것은 아니다. 'typeof' 키워드를 사용하면 특정 변수에 저장된 값의 타입을 알 수 있다. ex) typeof a; => 'number'  typeof b; => 'string'

또한 항상 변하지 않는 수인 상수를 선언할 수도 있다. 자바에서는 'final' 키워드로, 자바스크립트에서는 'const' 키워드를 사용한다. 상수 역시 마찬가지로 타입을 지정하지 않고 상수로 이미 선언된 값을 변경하고자 하면 에러가 발생한다.

2. console.log()메서드와 alert() 메서드

자바에서는 System.out.println() 메서드로 콘솔에 메시지를 출력하였다. 자바스크립트에서도 동일한 기능을 하는 메서드는 console.log()로, 자바에서와 마찬가지로 간단하게 디버깅을 위해 사용할 수 있다.
또 다른 자바스크립트의 출력 방법으로는 alert() 함수가 있다. alert()에 인자로 넘겨준 값을 웹 브라우저의 경고 창으로 띄우는 것으로, 웹 브라우저에서만 사용할 수 있다.

3. 논리 연산자와 if문

if문을 사용하는 방법은 자바와 자바스크립트가 동일하다. 다만, 자바에서는 두 값이 같음을 확인하는 논리 연산자로 '=='를 사용하지만 자바스크립트에서는 '==='을 사용한다. 반대로 자바에서는 같지않음을 평가하는 논리 연산자를 '!='로 작성하지만 자바스크립트에서는 '!=='로 작성해야 한다.

4. 배열과 for문

자바에서의 배열은 배열에 저장될 요소들의 타입이 존재하고, 길이가 최초 생성한 크기로 고정된다는 특징이 있다. 반면, 자바스크립트에서는 변수와 마찬가지로 배열의 타입이 존재하지 않고, 생성후에도 크기를 자유롭게 변경 가능하다. 이는 자바의 리스트와 비슷하다.
ex)  const arr = [];  // 배열 arr 생성

        arr.push(10);  // [10]
        arr.push(20);  // [10, 20]
        arr.push(30);  // [10, 20, 30]

        console.log(arr);  // 배열 arr 출력
          -> [10, 20, 30]

5. 함수 선언과 호출
