* 스프링 프레임워크와 스프링 부트

자바로 웹 애플리케이션을 개발하려는 사람이라면 스프링 프레임워크에 대해 한 번쯤 들어 봤을 것이다. 스프링 부트가 무엇인지 알기 위해서는 먼저 이 스프링 프레임워크에 대해 알아야 한다.

스프링 프레임워크를 이해하려면 객체지향 프로그래밍 관련 지식이 필요한데, 다음 세 가지 키워드를 중심으로 이해하면 좋다.

- 의존성 주입(DI)
- 제어의 역전(IOC)
- 관점지향 프로그래밍(AOP)
개발 경험이 많지 않다면 위의 의미가 잘 이해가지 않겠지만 스프링부트로 웹 애플리케이션을 직접 만들다 보면 쉽게 이해될 것이다.

* 비즈니스 로직과 스프링 프레임워크

자바 애플리케이션 개발 코드는 크게 두 영역으로 나눌 수 있다. 필수적이지만 애플리케이션에서 핵심적인 역할을 하는 코드와 필수적이지만 핵심적이지는 않은 코드이다. 두 코드의 차이점을 알아보자.

- 애플리케이션에서 필수적이면서 핵심적인 역할을 하는 코드는 비즈니스 로직이라고 부른다. 예를 들어 아마존 같은 웹 서비스를 개발한다고 생각해보자. 여기에는 다음과 같이 업무와 관련된 여러 규칙이 필요할 것이다. 해당 서비스에서 핵심적으로 수행해야 하는
규칙이므로 관련 코드가 필수적으로 존재해야 한다.
1. 재고가 없는 상품은 주문이 불가능하다.
2. 상품 주문은 결제에 성공해야 완료된다.
3. 배송 상태는 '주문완료, 배송시작, 배송중, 배송완료'로 구분된다.

- 반면 필수적이지만 핵심적이지 않은 코드는 비즈니스 로직을 제외한 나머지 로직을 말한다. 예를 들어 사용자에게 요청을 받거나 데이터베이스에 데이터를 저장하고 조회하는 기능은 필수적이지만, 핵심적인 업무라고는 할 수 없다.

스프링 프레임워크는 이 두 종류의 코드 중에서도 비즈니스 로직에 최대한 집중할 수 있도록 돕는 프레임워크이다. 프레임워크에서 앞서 언급했던 의존성 주입, 제어의 역전, 관점지향 프로그래밍 등을 쉽게 사용할 수 있도록 지원함으로써
비즈니스 로직과 이를 제외한 나머지 로직을 분류해 작업할 수 있도록 한다.

* 스프링 부트

스프링 프레임워크는 애플리케이션 개발에 유용하지만 초기 설정이 어렵고 복잡하다는 단점이 있다. 반면, 스프링 부트는 초기 설정을 자동으로 도와주는 오토 컨피규레이션(Auto Configuration)기능이 있어, 일반적으로 많이 사용하는 설정을 자동으로 지정하고,
필요할 경우 개발자가 튜닝까지 할 수 있다. 또한 스프링 프레임워크는 별도의 WAS를 서버에 설치해야 배포할 수 있는 반면, 스프링 부트는 WAS를 내장하고 있어서 훨씬 쉽게 배포할 수 있다.

그럼 스프링 부트가 애플리케이션을 얼마나 쉽게 만들고 실행할 수 있는지 직접 실습하면서 살펴보자.

1. 스프링 이니셜라이저
스프링 부트 애플리케이션을 만들기 위해서는 먼저 스프링 부트 프로젝트를 생성해야 한다. 프로젝트란 통합 개발환경(IDE)에서 애플리케이션을 다루는 단위를 말한다.
스프링 부트 프로젝트를 생성하려면 스프링 이니셜라이저가 필요하다. 스프링 이니셜라이저에서는 생성할 스프링 부트 프로젝트의 사용 언어나 버전 등을 설정할 수 있다. 구글에서 Spring Initializr라고 검색하거나 주소창에 https://start.spring.io를
입력하여 접속하면 하나의 페이지를 볼 수 있다.

2. 스프링 부트 애플리케이션 실행하기
다운받은 스프링 부트 프로젝트를 인텔리제이로 열고 실행해보자. 프로젝트를 생성하면서 스프링 이니셜라이저에 입력했던 내용이 프로젝트에 어떻게 반영되어 있는지 확인할 수 있다.

* 스프링 부트 프로젝트 살펴보기
인텔리제이 왼쪽에 있는 [Project] 창을 살펴보자.

* .idea 폴더와 .mvn 폴더
.idea 폴더에는 해당 프로젝트에 적용되는 인텔리제이 설정 정보가 들어있다. .mvn에는 빌드툴인 maven/gradle 중에서 메이븐을 사용하기 위한 파일이 들어있다.

* src 폴더
src 폴더는 이름에서 알 수 있듯이 각종 소스코드가 저장되는 경로이다. 그 하위에는 애플리케이션을 동작하는 코드가 있는 main 폴더와 main 폴더에서 작성된 애플리케이션 코드의 테스트 코드가 있는
test 폴더가 있다. main폴더는 다시 java 폴더와 resources 폴더로 나뉜다. java 폴더에는 이름 그대로 자바 소스코드, resources 폴더에는 정적 리소스들이 들어간다.
java 폴더부터는 패키지 구조가 등장하는데, 처음에는 프로젝트명 + Application.java 파일만 존재한다. 본격적인 개발은 필요에 따라 이 안에 패키지와 소스코드를 추가하는 방식으로 진행된다.

* target 폴더
target 폴더에는 메이븐이나 그래들 같은 빌드 툴로 빌드했을 때 서버에 배포할 수 있는 Jar 파일이 생성된다. 또한, .java 소스코드의 컴파일 파일인 .class 파일도 이곳에 생성된다.

* .gitignore
gitignore는 Git 관련 파일이다. Git은 소스코드를 버전별로 관리하기 위한 툴로, 이러한 프로그램을 가리켜 형상관리 툴이라고 부른다. Git으로 소스코드를 관리하다 보면 추적이 필요하지 않거나
무시하고 싶은 파일이나 폴더들이 생기는데 이 .gitignore는 이러한 파일들을 모아 추적하지 않도록 관리한다.

* mvnw와 mvnw.cmd
mvnw와 mvnw.cmd는 메이븐 명령어를 실행시키기 위한 스크립트 파일로, 내용은 두 파일이 거의 동일하다. mvnw에는 리눅스 계열 운영체제에서 사용할 수 있는 스크립트, mvnw.cmd에는 윈도우에서
사용할 수 있는 스크립트가 들어있다. 이 스크립트로 명령어를 실행하면, .mvn 폴더에 들어 있는 maven-wrapper.jar 파일이 실행되어 최종적으로 메이븐이라는 빌드 툴의 기능이 수행된다.

* pom.xml
pom.xml은 메이븐으로 관리되는 프로젝트의 빌드 관련 정보를 가지고 있는 파일이다. 'pom' 이라는 이름은 'Project Object Model'의 머리글자로, 프로젝트 관련 정보를 하나의 개체로 모델링하고
있다는 뜻이다. 파일을 열어보면 앞서 우리가 스프링 이니셜라이저에서 프로젝트를 생성할 때 지정했던 정보를 확인할 수 있다.

* 컨트롤러 추가하기
백엔드 웹 애플리케이션 개발에서 사용자부터 오는 HTTP 요청과 그에 대한 응답은 '컨트롤러'라고 부르는 소스코드를 통해 이루어진다. 컨트롤러에 대해 자세히 알아보자.

* 컨트롤러의 역할
백엔드 웹 애플리케이션의 역할은 클라이언트가 보내는 HTTP 요청을 받아 적절히 처리한 후 HTTP 응답을 주는 것이다. 이 클라이언트 요청 처리의 시작과 끝을 담당하는 곳이 컨트롤러이다.
사용자의 HTTP 요청을 크게 두 가지로 나눌 수 있다.

1. 사용자가 눈으로 볼 HTML 문서를 요청하는 것
2. HTML 문서가 아닌, 클라이언트에게 필요한 데이터만 요청하는 것

사용자가 눈으로 볼 수 있는 HTML 문서를 요청하는 이유는 웹 브라우저를 통해 UI가 있는 웹 페이지를 보려면 HTML 문법으로 작성된 HTML 문서가 있어야 하기 때문이다. 사용자는 이 HTML 문서에 나와있는
링크나 버튼 등을 눌러 웹 애플리케이션의 여러 기능을 사용할 수 있다. 반면, 클라이언트에게 필요한 데이터만 요청하는 경우는 HTML 문서가 이미 화면에 로딩된 상태에서 데이터만 받아 자바스크립트를
통해 사용자에게 보여주거나, 스마트폰 애플리케이션처럼 UI는 스마트폰에 설치된 상태에서 데이터만 받아 사용자에게 보여 줄 때이다.

여기서 컨트롤러는 사용자가 보낸 HTTP 요청을 받아 애플리케이션의 적절한 기능을 호출하고, 그 결과를 받아와 HTML 문서나 JSON이라는 데이터 형식으로 변환하여 사용자에게 응답으로 제공하는 역할을 한다.

* HTML 문서 요청
사용자가 웹 서비스를 이용하려면 직접 눈으로 볼 수 있는 웹 페이지가 있어야 한다. 이 웹 페이지는 하나의 온전한 HTML 문서여야 한다. 클라이언트에게 고정된 HTML 문서를 그대로 보내기만 하면 되는 경우라면
정적 리소스로 등록하는 것이 좋다. 물론 서버에서 HTML 문서를 동적으로 생성하기 위해 JSP나 Thymeleaf와 같은 템플릿 엔진을 사용하는 방법도 있지만 권장하지는 않는다. 이유는 백엔드와 프런트엔드가
나뉘면서 템플릿 엔진을 위한 API와 스마트폰에 각종 정보를 제공하기 위한 2개의 API를 각각 개발하고 유지해야 하는 번거로움이 있기 때문이다. 단, 서비스의 규모가 작거나 별도의 API를 제공할 필요가
없다면 템플릿 엔진을 사용해도 무방하다.

* 필요한 데이터만 요청
클라이언트가 필요한 데이터만 요청하는 경우는 HTML 문서 대신 JSON이라는 데이터 형식을 사용한다. JSON 데이터를 클라이언트와 주고 받을 수 있는 API를 제공하는 백엔드 웹 애플리케이션을 API 서버라고 부른다.
API 서버는 주로 HTML 페이지나 스마트폰 애플리케이션에서 사용자의 요청을 받거나 서버 간 통신에 사용된다. 별도의 UI가 필요하지 않은 경우 하나의 API 서버가 필요한 데이터의 송수신 기능을 수행할 수 있기
때문이다.

* URL의 구조
예를 들어 다음 두가지 URL로 특정 내용을 요청하고 응답받았다고 가정하자.
1. http://localhost:8080
2. http://localhost:8080/bye

URL은 인터넷을 사용하는 우리 모두가 흔하게 사용하는 용어이다. URL의 정확한 의미는 무엇일까? URL은 'Uniform Resource Locator'의 약자로, 네트워크상에 존재하는 자원의 위치를 표현하기
위해 사용하는 일련의 문자열 집합을 의미한다. 이 집합을 분석하면 다음과 같다.(2번 url 분석)

http -> scheme(해당 요청이 어떤 프로토콜을 사용할 것인지를 결정한다. 웹 개발 환경에서는 http 또는 https가 해당된다.)
localhost -> host(해당 요청이 네트워크상에서 어떤 호스트로 가야 할지를 결정한다. 호스트란 IP 주소를 가진 주체를 의미하므로 주로 서버의 IP 주소가 들어간다. 물론 IP 주소 대신 'google.com'과
같은 도메인 네임이 들어갈 수 있다. localhost는 127.0.0.1과 동일하게 자기 자신을 나타낸다.)
8080 -> port(해당 요청이 호스트의 어느 포트로 가야 할지를 결정한다. 포트가 생략될 경우에는 scheme에 해당하는 기본 포트가 기본값으로 지정된다. http는 80번, https는 443번이다.)
bye -> url-path(path라고도 불리며, 특정 호스트나 포트에 도달한 요청이 구체적으로 어떤 자원에 요청하는지를 의미한다. 여기서 '자원'이란 크게 두가지를 의미하는데, 하나는 HTML 문서나
이미지 파일 같은 정적인 파일의 이름이나 경로이고, 다른 하나는 사용자의 요청이나 서버의 상태에 따라 동적으로 생성되는 응답을 뜻한다.)

이와 같은 세부 항목 외에도 URL은 두가지 요소를 더 가지고 있다. 바로 인증에 사용되는 사용자 계정과 비밀번호인데, 이들 모두를 포함하는 전체 URL은 다음과 같은 형식으로 표현된다.

ex) http://someuser:anypassword@localhost:8080/bye
온전한 형태의 URL은 이런 모습이지만, 사실 계정과 비밀번호까지 넣어 인증하는 방식은 거의 사용되지 않는다. 종종 데이터베이스에 접속하기 위한 URL이 비밀번호만 제외하고 사용하는 정도이다.
즉, http://localhost:8080/bye은 계정정보를 생략하고 있는 URL인 것이다. URL은 이렇게 일부 요소를 생략할 수 있다. port를 명시하지 않은 경우 scheme에 해당하는 기본 포트로 연결되는 것이 대표적이다.
