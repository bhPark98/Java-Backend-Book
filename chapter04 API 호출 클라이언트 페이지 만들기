* 스프링 프레임워크와 스프링 부트

자바로 웹 애플리케이션을 개발하려는 사람이라면 스프링 프레임워크에 대해 한 번쯤 들어 봤을 것이다. 스프링 부트가 무엇인지 알기 위해서는 먼저 이 스프링 프레임워크에 대해 알아야 한다.

스프링 프레임워크를 이해하려면 객체지향 프로그래밍 관련 지식이 필요한데, 다음 세 가지 키워드를 중심으로 이해하면 좋다.

- 의존성 주입(DI)
- 제어의 역전(IOC)
- 관점지향 프로그래밍(AOP)
개발 경험이 많지 않다면 위의 의미가 잘 이해가지 않겠지만 스프링부트로 웹 애플리케이션을 직접 만들다 보면 쉽게 이해될 것이다.

* 비즈니스 로직과 스프링 프레임워크

자바 애플리케이션 개발 코드는 크게 두 영역으로 나눌 수 있다. 필수적이지만 애플리케이션에서 핵심적인 역할을 하는 코드와 필수적이지만 핵심적이지는 않은 코드이다. 두 코드의 차이점을 알아보자.

- 애플리케이션에서 필수적이면서 핵심적인 역할을 하는 코드는 비즈니스 로직이라고 부른다. 예를 들어 아마존 같은 웹 서비스를 개발한다고 생각해보자. 여기에는 다음과 같이 업무와 관련된 여러 규칙이 필요할 것이다. 해당 서비스에서 핵심적으로 수행해야 하는
규칙이므로 관련 코드가 필수적으로 존재해야 한다.
1. 재고가 없는 상품은 주문이 불가능하다.
2. 상품 주문은 결제에 성공해야 완료된다.
3. 배송 상태는 '주문완료, 배송시작, 배송중, 배송완료'로 구분된다.

- 반면 필수적이지만 핵심적이지 않은 코드는 비즈니스 로직을 제외한 나머지 로직을 말한다. 예를 들어 사용자에게 요청을 받거나 데이터베이스에 데이터를 저장하고 조회하는 기능은 필수적이지만, 핵심적인 업무라고는 할 수 없다.

스프링 프레임워크는 이 두 종류의 코드 중에서도 비즈니스 로직에 최대한 집중할 수 있도록 돕는 프레임워크이다. 프레임워크에서 앞서 언급했던 의존성 주입, 제어의 역전, 관점지향 프로그래밍 등을 쉽게 사용할 수 있도록 지원함으로써
비즈니스 로직과 이를 제외한 나머지 로직을 분류해 작업할 수 있도록 한다.

* 스프링 부트

스프링 프레임워크는 애플리케이션 개발에 유용하지만 초기 설정이 어렵고 복잡하다는 단점이 있다. 반면, 스프링 부트는 초기 설정을 자동으로 도와주는 오토 컨피규레이션(Auto Configuration)기능이 있어, 일반적으로 많이 사용하는 설정을 자동으로 지정하고,
필요할 경우 개발자가 튜닝까지 할 수 있다. 또한 스프링 프레임워크는 별도의 WAS를 서버에 설치해야 배포할 수 있는 반면, 스프링 부트는 WAS를 내장하고 있어서 훨씬 쉽게 배포할 수 있다.

그럼 스프링 부트가 애플리케이션을 얼마나 쉽게 만들고 실행할 수 있는지 직접 실습하면서 살펴보자.

1. 스프링 이니셜라이저
스프링 부트 애플리케이션을 만들기 위해서는 먼저 스프링 부트 프로젝트를 생성해야 한다. 프로젝트란 통합 개발환경(IDE)에서 애플리케이션을 다루는 단위를 말한다.
스프링 부트 프로젝트를 생성하려면 스프링 이니셜라이저가 필요하다. 스프링 이니셜라이저에서는 생성할 스프링 부트 프로젝트의 사용 언어나 버전 등을 설정할 수 있다. 구글에서 Spring Initializr라고 검색하거나 주소창에 https://start.spring.io를
입력하여 접속하면 하나의 페이지를 볼 수 있다.

2. 스프링 부트 애플리케이션 실행하기
다운받은 스프링 부트 프로젝트를 인텔리제이로 열고 실행해보자. 프로젝트를 생성하면서 스프링 이니셜라이저에 입력했던 내용이 프로젝트에 어떻게 반영되어 있는지 확인할 수 있다.

* 스프링 부트 프로젝트 살펴보기
인텔리제이 왼쪽에 있는 [Project] 창을 살펴보자.

* .idea 폴더와 .mvn 폴더
.idea 폴더에는 해당 프로젝트에 적용되는 인텔리제이 설정 정보가 들어있다. .mvn에는 빌드툴인 maven/gradle 중에서 메이븐을 사용하기 위한 파일이 들어있다.

* src 폴더
src 폴더는 이름에서 알 수 있듯이 각종 소스코드가 저장되는 경로이다. 그 하위에는 애플리케이션을 동작하는 코드가 있는 main 폴더와 main 폴더에서 작성된 애플리케이션 코드의 테스트 코드가 있는
test 폴더가 있다. main폴더는 다시 java 폴더와 resources 폴더로 나뉜다. java 폴더에는 이름 그대로 자바 소스코드, resources 폴더에는 정적 리소스들이 들어간다.
java 폴더부터는 패키지 구조가 등장하는데, 처음에는 프로젝트명 + Application.java 파일만 존재한다. 본격적인 개발은 필요에 따라 이 안에 패키지와 소스코드를 추가하는 방식으로 진행된다.

* target 폴더
target 폴더에는 메이븐이나 그래들 같은 빌드 툴로 빌드했을 때 서버에 배포할 수 있는 Jar 파일이 생성된다. 또한, .java 소스코드의 컴파일 파일인 .class 파일도 이곳에 생성된다.

* .gitignore
gitignore는 Git 관련 파일이다. Git은 소스코드를 버전별로
