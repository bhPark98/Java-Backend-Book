1. 웹 개발이란? : 웹(Web)은 월드 와이드 웹이라는 말에서 따온 것으로, 전 세계를 마치 거미줄처럼 연결한다는 개념이다. 이는 물리적 실체가 있는 것이 아니라 전 세계를 아우르는 정보 교환 방식 자체를 의미한다.

웹의 다른 이름은 HTTP(Hyper Text Transfer Protocol)이다. 하지만 HTTP는 웹과는 달리 프로토콜이라는 실체가 있다. 프로토콜이란 어떤 약속이나 규약을 말한다. 즉, HTTP는 웹에서 사용되는 통신 규약을 의미하는 것이다.

웹 개발을 하면서 마주하게 되는 키워드에는 HTTP외에 웹 브라우저, HTML, 웹 서버 등이 있다. 웹 브라우저는 우리가 흔히 쓰는 구글 크롬과 같이 웹사이트에 접속할 수 있도록 도와주는 프로그램을 말한다. HTML은 이 웹 브라우저를 통해 웹사이트에 방문했을 때 보이는 화면이다.

많은 사람들이 웹과 인터넷이라는 두 가지 개념을 혼동하곤 한다. 인터넷은 물리적으로 연결된 전세계의 네트워크 망을 가리키는 것이고, 웹은 HTTP라는 프로토콜을 통해 인터넷에서 데이터를 주고받는 방법을 의미한다.

인터넷에서는 웹 말고도 데이터를 주고받는 여러 가지 방법이 있는데 파일을 주고받을 때는 FTP, 메일을 보낼 때는 SMTP 프로토콜을 사용한다. 이들은 모두 HTTP와 마찬가지로 인터넷이라는 네트워크 망을 사용한다.

2. 프론트엔드와 백엔드의 분화

서비스 다양화에 따라 HTTP역시 복잡해지면서 HTML 문서 외에 여러 형태의 데이터를 주고 받을 수 있도록 발전하게 되었다. 그래서 웹 개발은 사용자의 눈에 보이는 부분을 다루는 프론트엔드와 보이지 않는 부분을 다루는 백엔드로 나뉘게 되었다.

프론트엔드는 서비스를 사용하는 사람들이 실제로 보는 웹 브라우저의 화면을 구성하고, 화면 구성에 필요한 데이터를 웹 서버에 요청해서 받는다. 그리고 사용자가 글을 작성하는 등의 행동을 하면 그 데이터를 웹 서버로 보낸다.

백엔드는 그에 맞는 웹 서버를 구성하여 프론트엔드에서부터 넘어오는 요청을 처리할 수 있는 기능을 만들게 된다.

3. 백엔드 개발

백엔드는 프론트엔드와 스마트폰 애플리케이션에서 오는 요청을 받아서 처리한 후 사용자에게 다시 데이터를 전달하는 형태이다. 이렇게 프론트엔드와 백엔드가 데이터를 서로 주고받는 형태로 개발하는 것을 API 개발이라고 한다.

API란 하나의 프로그램 또는 라이브러리를 외부의 다른 곳에서도 사용할 수 있도록 해주는 인터페이스를 의미한다.

백엔드 개발자의 API 개발은 프론트엔드와 주고받을 데이터를 처리하기 위한 서버 프로그램을 개발한다는 의미이다.

백엔드 개발에 포함되는 다른 중요한 요소는 API 서버로 들어온 요청을 데이터베이스와 같은 외부 요소를 통해 처리하는 일인데, API 서버는 많은 데이터를 저장하고 조회하는데 취약하므로 백엔드 개발자는 API 서버에서 데이터베이스로 데이터를 저장하거나 조회하고 데이터가 늘어남에 따라 발생하는 성능 문제를 해결한다.

4. 백엔드 개발자의 역할

서비스 개발은 일반적으로 다음과 같은 5단계를 거친다.

기획 -> 설계 -> 개발 -> 배포 -> 운영

1. 기획단계

어떤 서비스를 만들것인가를 정의하는 단계이다. 보통 개발자가 아닌 기획자가 서비스를 주도하며, 사람들의 어떤 문제를 해결하는지, 누구를 타깃으로 하는지, 다른 서비스와의 차별점은 무엇인지, 비즈니스 모델은 어떻게 되는지 등을 정의한다.

이 단계에서 개발자가 하는 일은 기획 내용에 대한 가능성과 기술적 조언, 개발 기간에 대한 검토 등이다.

2. 설계단계

기획 단계에서 정의한 서비스를 구현하기 위해 어떤 기능과 인프라가 필요한지 설계하는 단계이다. 모든 기획이 기획 단계에서 완벽하게 정의될 수 없기 때문에 설계 단계에서도 수시로 변경될 수 있다. 이 단계부터는 개발자가 주도적으로 서비스 개발에 참여한다.

프론트, 백엔드 개발자는 각자 다루게 될 데이터와 주고받을 데이터를 정의한다. 즉, API를 설계하는 것이다. 더 나아가 백엔드 개발자는 데이터베이스와 같은 저장소에 데이터가 어떻게 저장되는지도 정의해야 한다.

이렇게 데이터를 정의한 뒤에는 이를 문서로 만드는데, 이를 API 문서라고 한다. 정확한 문서를 통해서야 개발 과정에서 문서를 참고하여 제대로 개발할 수 있다.

3. 개발단계

서비스를 실제로 구현하는 단계이다. 개발 단계에서는 설계 단계에서 만들어진 문서를 기반으로 실제 프로그램을 개발한다. 개발 초기에는 아직 백엔드 서버가 없으므로 프론트엔트 개밸자가 임시로 사용하는 목업 서버를 만들기도 한다.

반대로 백엔드 개발자 역시 아직 프론트엔드 페이지가 없으므로 Postman과 같은 툴을 사용하거나 테스트 코드를 작성하여 본인이 개발한 코드를 확인한다.

대부분의 서비스는 오픈일이 정해져 있으므로 일정을 지키기 위해서는 빠른 속도로 개발해야 한다. 그렇기 때문에 서비스 개발 초기에는 특히 빠르게 구현하는 쪽에 높은 우선순위를 둘 때가 많다.

4. 배포단계

개발 단계에서 구현된 코드를 서버에 올려 서비스하는 단계이다. 물론 처음에 배포한 코드를 사용자에게 바로 서비스하는 경우는 드물다. 일반적으로 어느 정도 개발된 코드의 초기 배포는 개발 단계에서 이루어지고, 프론트엔드와 백엔드의 여러 개발자가 각자 배포된 서버를 통해 남은 개발을 이어나간다.

최종적으로 사용자에게 서비스를 공개할 시점이 되면 공개할 버전의 소스코드를 각자 서버에 배포해 둔 상태에서 테스트를 진행한다.

5. 운영단계

서비스를 오픈하고 운영하는 단계를 의미한다. 아무리 서비스를 잘 개발했다고 하더라도 모든 서비스는 버그를 내포하고 있다. 서비스를 오픈한 다음부터는 CS(Customer Service)등을 통해 수시로 여러가지 버그가 접수되므로 우선순위에 따라 하나씩 처리해 나가야 한다.

5. 백엔드 개발자에게 필요한 역량

1. 커뮤니케이션 능력 : 타 부서와 협업이 많은 백엔드 개발자에게는 특히나 중요한 역량이다. 기획부터 운영까지 커뮤니케이션이 필요하지 않은 단계가 없다. 여기서 말하는 커뮤니케이션 능력이란 내가 알고 있는 것을 상대방에게 이해시키고 반대로 상대방이 알고 있는 것을 이해하는 능력이다.

2. 구현 능력 : 기획한 내용을 실제 개발물로 구현해 내는 능력이다. 요구사항을 이해하고 그것을 자신이 구현할 수 있는 언어로 개발하는 능력은 개발자가 갖춰야 할 가장 기본적이면서도 중요한 역량이다.

3. 주도성 : 좋은 개발자가 되려면 프로젝트를 적극적으로 끌고 나갈 수 있어야 한다. 주도성이 강한 사람은 팀의 목표와 자신이 해야 할 일을 이해하며, 팀과 자신이 더 좋은 방향으로 나아가려면 무엇을 해야 할지를 먼저 파악하고 행동하는 사람이다.

4. 풍부한 CS 지식 : 풍부한 CS 지식은 단순히 작동만 하는 소프트웨어를 만들어 내는 것을 넘어, 방대한 트래픽을 처리할 수 있는 시스템을 설계하고 구현하는데 도움이 된다. 대표적으로 운영체제, 데이터베이스, 네트워크 관련 지식을 들 수 있다.

5. 당연한 것에 의문 품기 : 개발자는 단순히 기능을 구현하는 데 그치지 않고, 그 원리를 이해햐야 하기 때문에 이러한 습관을 들이는 것이 좋다.
