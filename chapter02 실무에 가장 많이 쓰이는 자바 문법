1. 실습 환경 구축하기

자바의 문법을 익히려면 알맞은 실습환경을 갖추어야 한다. IDE(Integrated Development Environment)란 통합개발환경, 코딩을 비롯해 개발에 필요한 각종 작업을 도와주는 소프트웨어를 말한다. IDE는 일반적으로 다음과 같은 기능을 포함한다.

  1. 소스코드 편집기
  2. 빌드 자동화
  3. 디버거

소스코드 편집기는 코드를 직접 작성 및 편집할 수 있는 기능과 문법적으로 올바른 코드인지를 검사하여 사용자에게 보여주는 기능을 포함한다. 자동 완성으로 코드 작성을 도와주는 것 역시 소스코드 편집기의 기능이다.

빌드란 소스코드 편집기로 작성된 코드를 컴퓨터가 실행할 수 있는 바이너리 코드 형태로 변환하는 것을 의미한다. 여기에는 테스트 코드를 실행하여 코드가 올바르게 수정되었는지 체크하는 기능까지 포함된다. 빌드 자동화는 이 과정을 자동화해주는 것으로, 버튼 하나만 클릭하면 모든 테스트 코드를 실행하며
테스트 코드가 성공하면 빌드까지 해준다.

디버거는 소스코드의 어떤 부분에서 문제가 발생했는지를 분석하는 프로그램이다. 소스코드 편집기의 특정 부분을 체크하고 프로그램을 실행시키면 프로그램이 체크한 부분을 실행하는 순간 멈추는데, 이 멈춘 부분에서 어떤 변수가 어떤 값을 가지는지와 같은 정보를 줄 수 있다.

IDE는 이와 같은 세가지 대표적인 기능을 제공한다.

2. 자바의 기본 문법 점검하기

* 조건문 : if문과 else문

자바코드는 다른 프로그래밍 언어와 마찬가지로 순차적으로 위애서 아래로 실행되는데, 실행의 흐름을 바꿔 코드를 선택적으로 실행하는 방법을 제공하는 것이 조건문이다. 어떤 코드를 실행할지를 결정하는 간단한 방법은 '특정 조건이 만족되면 실행할 코드'와 '특정 조건이 만족되지 않으면 실행할 코드'로
나누는 것이다.

  ex) if(특정 조건) {
        // 특정 조건이 만족되면 실행할 코드
      } else {
        // 특정 조건이 만족되지 않으면 실행할 코드
      }

여기에 나오는 if와 else를 조합하여 다음과 같이 else if문을 만들 수도 있다.

  ex) if(1번조건) {
        // 1번 조건이 만족되면 실행할 코드
      } else if(2번조건) {
        // 2번 조건만 만족되면 실행할 코드
      } else {
        // 1, 2번 조건이 만족되지 않으면 실행할 코드
      }

else if 문에서 중요한 포인트는 순서대로 if 조건식을 검사하면서 만족되는 조건이 있으면 해당 조건에 맞는 코드를 실행하고, 그렇지 않은 조건은 건너뛴다는 점이다.

* 반복문 : for문과 while문

1. for 문
for 문의 문법을 보면 for 조건식의 괄호 안에 세미콜론으로 구분되는 세 가지 영역이 존재한다.

  ex) for(최초 1회만 실행할 코드; 반복 조건; 1회 반복 후 실행할 코드) {
            반복 실행할 코드
        }

2. while 문
이번에는 while 문을 알아보자. while문은 for문보다 그 형태가 간단하다.

ex) while(반복조건) {
    // 반복 실행할 코드
    }

for문에 비해 간단하다. 반복조건이 참이면 반복하고 그렇지 않으면 반복하지 않는다.

* 다형성 : 상속과 인터페이스

다형성은 자바의 객체지향 개념을 관통하는 아주 중요한 개념이므로 확실하게 알고 넘어가는 것이 좋다. 다형성의 기본적인 정의는 하나의 객체가 내부적으로 여러 타입을 가질 수 있고, 어떤 타입이 들어 있는냐에 따라 각기 다른 동작을 하는 성질을 의미한다.

좀 더 쉽게 예를 들어서 설명해보면 자동차(Car)라는 인터페이스를 정의했다고 가정하고 이 자동차 인터페이스를 구현하는 Sonata라는 클래스도 정의했다. 또 다른 자동차 인터페이스를 구현하는 K5라는 클래스도 정의했다. 그럼 문법적으로 다음과 같이 사용할 수 있다.

  ex) public interface Car{}

      public class Sonata implements Car {}

      public class K5 implements Car {}

      public class Main {
          public static void main(String[] args) {
              Car car1 = new Sonata();
              Car car2 = new K5();
          }
      }

인터페이스인 Car 타입의 참조변수에 자동차 인터페이스의 구현체인 Sonata와 K5의 인스턴스를 모두 대입가능한데 이것이 가능하도록 하는 특성이 바로 다형성이다.

앞선 코드의 Main 블록에서 변수 car1과 car2를 사용하는 코드를 작성한다고 하자. car1과 car2를 통해 Sonata 인스턴스와 K5 인스턴스의 메서드를 실행시키기 위해 car1과 car2 안에 어떤 인스턴스가 들어있는지를 알아야할까?
물론 알 수는 있지만, 알 필요가 없다. 알게 되는 순간 다형성은 그 의미를 잃어버리고 Sonata 타입이나 K5 타입의 참조변수를 직접 사용하는 것과 다름없어지기 때문이다.

* 컬렉션: List

자바에서 컬렉션이란 데이터의 집합을 의미한다. 주요 컬렉션으로 List, Set, Map이 있는데, 이것은 모두 구현체가 아닌 인터페이스이다. 그 중 가장 많이 사용되는 List 인터페이스의 구현체 ArrayList는 배열처럼 여러 개의 데이터를 다룰 때 주로 사용된다.

* 동일성과 동등성

자바에서 동일하다고 말하는 경우는 같은 인스턴스를 참조하고 있을 때이다. 예를 들어

  ex) public class Main {
        public static void main(String[] args) {
            String str1 = new String("is same?");
            String str2 = new String("is same?");

            System.out.println(str1 == str2); // true or false?
        }

위 코드의 실행결과는 false인데 이유는 str1은 String 인스턴스를 생성하여 참조하고 str2 역시 또 다른 인스턴스를 생성하여 참조하므로 두 인스턴스가 같은 값을 가지고 있더라도 각각 생성되었으므로 서로 다른 인스턴스가 된다. 즉, 두 변숫값은 동일하지 않다.
변수 str1, str2가 가지고 있는 String 인스턴스의 값을 비교하려면 ==가 아니라 equals() 메서드로 비교해야한다.

이것이 바로 동일성과 동등성의 차이이다. 만약 새로운 클래스를 선언하고 해당 클래스로 인스턴스를 만든 후 인스턴스끼리 동등성을 비교하려 한다면 다음과 같은 사항을 주의해야 한다.

String 클래스는 자바에서 기본으로 제공해주는 String 클래스에 구현된 equals()를 사용하는 반면, 새로 만든 클래스에 있는 equals() 메서드는 Object 클래스로부터 상속받은 것이다.

Object 클래스에서 상속된 equals() 메서드는 새로 만든 클래스의 동등성을 비교하기에 충분하지 않다. 따라서 반드시 새 클래스를 위한 equals() 메서드를 오버라이딩 해줘야 하며, hashCode() 메서드 역시 함꼐 오버라이딩 해주는 것이 좋다.

