1. 실습 환경 구축하기

자바의 문법을 익히려면 알맞은 실습환경을 갖추어야 한다. IDE(Integrated Development Environment)란 통합개발환경, 코딩을 비롯해 개발에 필요한 각종 작업을 도와주는 소프트웨어를 말한다. IDE는 일반적으로 다음과 같은 기능을 포함한다.

  1. 소스코드 편집기
  2. 빌드 자동화
  3. 디버거

소스코드 편집기는 코드를 직접 작성 및 편집할 수 있는 기능과 문법적으로 올바른 코드인지를 검사하여 사용자에게 보여주는 기능을 포함한다. 자동 완성으로 코드 작성을 도와주는 것 역시 소스코드 편집기의 기능이다.

빌드란 소스코드 편집기로 작성된 코드를 컴퓨터가 실행할 수 있는 바이너리 코드 형태로 변환하는 것을 의미한다. 여기에는 테스트 코드를 실행하여 코드가 올바르게 수정되었는지 체크하는 기능까지 포함된다. 빌드 자동화는 이 과정을 자동화해주는 것으로, 버튼 하나만 클릭하면 모든 테스트 코드를 실행하며
테스트 코드가 성공하면 빌드까지 해준다.

디버거는 소스코드의 어떤 부분에서 문제가 발생했는지를 분석하는 프로그램이다. 소스코드 편집기의 특정 부분을 체크하고 프로그램을 실행시키면 프로그램이 체크한 부분을 실행하는 순간 멈추는데, 이 멈춘 부분에서 어떤 변수가 어떤 값을 가지는지와 같은 정보를 줄 수 있다.

IDE는 이와 같은 세가지 대표적인 기능을 제공한다.

2. 자바의 기본 문법 점검하기

* 조건문 : if문과 else문

자바코드는 다른 프로그래밍 언어와 마찬가지로 순차적으로 위애서 아래로 실행되는데, 실행의 흐름을 바꿔 코드를 선택적으로 실행하는 방법을 제공하는 것이 조건문이다. 어떤 코드를 실행할지를 결정하는 간단한 방법은 '특정 조건이 만족되면 실행할 코드'와 '특정 조건이 만족되지 않으면 실행할 코드'로
나누는 것이다.

  ex) if(특정 조건) {
        // 특정 조건이 만족되면 실행할 코드
      } else {
        // 특정 조건이 만족되지 않으면 실행할 코드
      }

여기에 나오는 if와 else를 조합하여 다음과 같이 else if문을 만들 수도 있다.

  ex) if(1번조건) {
        // 1번 조건이 만족되면 실행할 코드
      } else if(2번조건) {
        // 2번 조건만 만족되면 실행할 코드
      } else {
        // 1, 2번 조건이 만족되지 않으면 실행할 코드
      }

else if 문에서 중요한 포인트는 순서대로 if 조건식을 검사하면서 만족되는 조건이 있으면 해당 조건에 맞는 코드를 실행하고, 그렇지 않은 조건은 건너뛴다는 점이다.

* 반복문 : for문과 while문

1. for 문
for 문의 문법을 보면 for 조건식의 괄호 안에 세미콜론으로 구분되는 세 가지 영역이 존재한다.

  ex) for(최초 1회만 실행할 코드; 반복 조건; 1회 반복 후 실행할 코드) {
            반복 실행할 코드
        }

2. while 문
이번에는 while 문을 알아보자. while문은 for문보다 그 형태가 간단하다.

ex) while(반복조건) {
    // 반복 실행할 코드
    }

for문에 비해 간단하다. 반복조건이 참이면 반복하고 그렇지 않으면 반복하지 않는다.

* 다형성 : 상속과 인터페이스

다형성은 자바의 객체지향 개념을 관통하는 아주 중요한 개념이므로 확실하게 알고 넘어가는 것이 좋다. 다형성의 기본적인 정의는 하나의 객체가 내부적으로 여러 타입을 가질 수 있고, 어떤 타입이 들어 있는냐에 따라 각기 다른 동작을 하는 성질을 의미한다.

좀 더 쉽게 예를 들어서 설명해보면 자동차(Car)라는 인터페이스를 정의했다고 가정하고 이 자동차 인터페이스를 구현하는 Sonata라는 클래스도 정의했다. 또 다른 자동차 인터페이스를 구현하는 K5라는 클래스도 정의했다. 그럼 문법적으로 다음과 같이 사용할 수 있다.

  ex) public interface Car{}

      public class Sonata implements Car {}

      public class K5 implements Car {}

      public class Main {
          public static void main(String[] args) {
              Car car1 = new Sonata();
              Car car2 = new K5();
          }
      }

인터페이스인 Car 타입의 참조변수에 자동차 인터페이스의 구현체인 Sonata와 K5의 인스턴스를 모두 대입가능한데 이것이 가능하도록 하는 특성이 바로 다형성이다.

앞선 코드의 Main 블록에서 변수 car1과 car2를 사용하는 코드를 작성한다고 하자. car1과 car2를 통해 Sonata 인스턴스와 K5 인스턴스의 메서드를 실행시키기 위해 car1과 car2 안에 어떤 인스턴스가 들어있는지를 알아야할까?
물론 알 수는 있지만, 알 필요가 없다. 알게 되는 순간 다형성은 그 의미를 잃어버리고 Sonata 타입이나 K5 타입의 참조변수를 직접 사용하는 것과 다름없어지기 때문이다.

* 컬렉션: List

자바에서 컬렉션이란 데이터의 집합을 의미한다. 주요 컬렉션으로 List, Set, Map이 있는데, 이것은 모두 구현체가 아닌 인터페이스이다. 그 중 가장 많이 사용되는 List 인터페이스의 구현체 ArrayList는 배열처럼 여러 개의 데이터를 다룰 때 주로 사용된다.

* 동일성과 동등성

자바에서 동일하다고 말하는 경우는 같은 인스턴스를 참조하고 있을 때이다. 예를 들어

  ex) public class Main {
        public static void main(String[] args) {
            String str1 = new String("is same?");
            String str2 = new String("is same?");

            System.out.println(str1 == str2); // true or false?
        }

위 코드의 실행결과는 false인데 이유는 str1은 String 인스턴스를 생성하여 참조하고 str2 역시 또 다른 인스턴스를 생성하여 참조하므로 두 인스턴스가 같은 값을 가지고 있더라도 각각 생성되었으므로 서로 다른 인스턴스가 된다. 즉, 두 변숫값은 동일하지 않다.
변수 str1, str2가 가지고 있는 String 인스턴스의 값을 비교하려면 ==가 아니라 equals() 메서드로 비교해야한다.

이것이 바로 동일성과 동등성의 차이이다. 만약 새로운 클래스를 선언하고 해당 클래스로 인스턴스를 만든 후 인스턴스끼리 동등성을 비교하려 한다면 다음과 같은 사항을 주의해야 한다.

String 클래스는 자바에서 기본으로 제공해주는 String 클래스에 구현된 equals()를 사용하는 반면, 새로 만든 클래스에 있는 equals() 메서드는 Object 클래스로부터 상속받은 것이다.

Object 클래스에서 상속된 equals() 메서드는 새로 만든 클래스의 동등성을 비교하기에 충분하지 않다. 따라서 반드시 새 클래스를 위한 equals() 메서드를 오버라이딩 해줘야 하며, hashCode() 메서드 역시 함께 오버라이딩 해주는 것이 좋다.

* 람다 표현식

람다 표현식을 보면 어떤 문법인지 잘 그려지지 않지만 앞으로는 바로 익명함수를 떠올릴 수 있어야 한다. 익명함수란 함수는 함수이지만, 이름이 없는 함수를 말한다.

자바에서 함수를 선언하는 방법을 떠올려보자. 자바 기본 문법에서는 함수만 따로 선언할 수 없고 클래스가 있어야 한다. 즉, 클래스를 먼저 선언한 다음 그 안에 함수를 선언해야 그 전체를 메서드라고 부를 수 있다.

중요한 점은 클래스와 메서드에 모두 이름을 붙여 줘야 하나의 함수로 사용할 수 있다는 것이다. 임시로 사용할 함수 때문에 매번 클래스를 선언하고 메서드를 선언하는 것은 굉장히 불편하다.

이런 불편함을 피하기 위해 익명 클래스를 사용하기도 하지만 이 역시 불필요한 코드가 많이 추가되어 코드의 가독성이 떨어진다.

  ex) public class Main {
        public static void main(String[] args) {
          List list = new ArrayList<String>();

          list.add("public");
          list.add("static");
          list.add("void");

          // 익명 클래스 코드
          list.sort(new Comparator<String>() {
            @Override
            public int compare(String str1, String str2) {
                return str1.compareTo(str2);
            }
          });

          // 람다 표현식 코드
          list.sort((Comparator<String>) (str1, str2) -> str1.compareTo(str2));
        }
      }

위 코드를 보면 익명 클래스로 작성했을때와 람다 표현식으로 작성했을때, 코드가 얼마나 간결해졌는지 확인할 수 있다.

코드가 간결해지면 더 중요한 것에 집중할 수 있다. 우리는 코드에서 로직을 보고자 하는 것이지, 복잡한 문법을 보고자 하는 것이 아니다. 람다 표현식은 이어서 설명할 스트림 API와도 잘 어울린다.

* 파라미터 1개, 명령문 1개인 경우

파라미터가 1개인 경우 파라미터를 감싸는 괄호를 생략할 수 있다. 또한 명령문이 1개인 경우 다음과 같이 함수를 감싸는 중괄호와 세미콜론을 생략할 수 있다.

var1 -> System.out.println(var1)

이때 명령문의 결과가 이 람다 표현식의 리턴 값이 된다. System.out.println은 리턴 값이 void이기 때문에 이 람다 표현식의 리턴 값 역시 void가 된다.

* 파라미터 1개, 명령문 2개 이상인 경우

파라미터가 1개이기 때문에 파라미터를 감싸는 괄호는 생략할 수 있지만, 명령문이 2개 이상이 될 경우에는 반드시 중괄호로 명령문을 감싸야 한다.

var1 -> {
  var1 = var1 + 1;
  System.out.println(var1);
  return var1;
}

* 파라미터 2개 이상, 명령문 1개인 경우

파라미터가 2개 이상인 경우에는 반드시 괄호로 파라미터를 감싸야 한다.

(var1, var2) -> System.out.println(var1 + var2)

* 파라미터 2개 이상, 명령문 2개 이상인 경우

앞의 내용을 조합한다고 생각하면 된다. 파라미터는 괄호로 감싸고, 함수 역시 중괄호로 감싸야 한다.

(var1, var2) -> {
  System.out.println(var1);
  System.out.println(var2);
}

* 스트림 API

스트림 API는 컬렉션에 추가된 메서드의 집합을 의미한다. 스트림은 컬렉션에 담겨 있는 데이터를 마치 물이 흐르는 것처럼 처리한다는 데서 유래한 이름이다.

자바 기본서에서 많이 보았을 파일 입출력에 사용되는 '입력 스트림'과 '출력 스트림'의 스트림과 의미상으로는 동일하다. 물론 지금부터 다루는 스트림 API는 컬렉션에 담긴 데이터를 처리하는 존재임을 명심하자.

스트림 API는 스트림 API가 호출되는 컬렉션 객체들의 요소들을 인자로 들어온 람다 표현식을 통해 처리한다.

  ex) public class Main {
        public static void main(String[] args) {
          List list = new ArrayList<String>();

          list.add("public");
          list.add("static");
          list.add("void");

          // for 문으로 List를 순회할 수 있다.
          for(int i = 0; i < list.size(); i++) {  // list.size()는 리스트의 크기를 반환한다.
            System.out.println(list.get(i));  // i번째 요소가 출력된다.
          }
        }
      }

위 코드를 스트림 API로 바꿀 수 있다.

public class Main {
  public static void main(String[] args) {
    List list = new ArrayList<String>();

    list.add("public");
    list.add("static");
    list.add("void");

    list.stream().forEach(str -> System.out.println(str));
  }
}

확연하게 간결해진 코드를 확인할 수 있다. 이제 더 이상 반복문을 위한 변수 i를 몰라도 된다. 이번에는 리스트에 1~10까지의 수를 넣고, 그 리스트에서 2의 배수만으로 이루어진 리스트를 새로 뽑는 예제도 살펴보자.

  ex) public class Main {
        public static void main(String[] args) {
          Integer[] integerArray = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
          List<Integer> list = Arrays.asList(integerArray);

          List evenList = new ArrayList<Integer>();

          for(int i = 0; i < list.size(); i++) {
            Integer number = list.get(i);
            if(number % 2 == 0) {  // 2로 나눴을 때의 나머지가 0이면 2의 배수이다.
                evenList.add(number);
              }
            }

            for(int i = 0; i < evenList.size(); i++) {
              System.out.println(evenList.get(i));
            }
        }
    }

위 코드를 스트림 API를 사용해서 바꿔보자.

public class Main {
        public static void main(String[] args) {
          Integer[] integerArray = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
          List<Integer> list = Arrays.asList(integerArray);

          List evenList = list.stream()
                  .filter(value -> value % 2 == 0).collect(Collectors.toList());

          evenList.stream().forEach(value -> System.out.println(value));
        }
    }

스트림 API에서 forEach() 메서드와 filter() 메서드를 활용하면 코드가 간결해지는 것을 확인했다. 이 외에도 스트림 API는 distinct(), map(), collect(), toList() 등의 메서드를 통해 다양한 기능을 제공한다.
스트림 API에서 자주 사용되는 메서드를 살펴보자.

* forEach()
forEach() 메서드는 컬렉션의 요소들을 하나씩 꺼내서 반복하므로 문법적으로 보면 반복문을 쉽게 대체할 수 있다.

* filter()
filter() 메서드는 컬렉션의 요소들 중 조건문에 맞는 요소만 뽑아 새로운 스트림을 만든다. collect() 메서드와 함께 사용하면 전체 리스트 요소 중 조건문을 만족하는 요소를 뽑아 새로운 리스트를 만들 수 있다.

* distinct()
distinct() 메서드는 컬렉션의 요소에서 중복을 제거한다. 중복을 제거한다는 행위가 이미 정해져있기 때문에 람다 표현식을 함수의 인자로 넘겨줄 필요가 없고, 이때 중복인지 아닌지를 판단하는 것은 요소들의 equals() 메서드이다.

* map()
map() 메서드는 컬렉션의 요소들에 특정 연산을 적용한 새로운 스트림을 만든다. 이때 입력으로 들어간 컬렉션의 수와 출력으로 나오는 컬렉션의 수는 동일하다.

* collect()/ toList()
filter(), distinct(), map()과 함께 .collect(Collectors.toList()) 형태로 사용하면 스트림을 간단하게 리스트로 만들 수 있다. 이렇게 리스트로 바꾸는 경우가 아주 많기 때문에 자바 16 버전부터는
.collect(Collectors.toList()) 대신 .toList()를 사용해 간결하게 코드를 작성하는 것이 가능해졌다.

* Optional
Optional은 널이 들어있는 레퍼런스 변수의 멤버에 접근하려고 할 때 발생하는 예외인 NullPointerException을 우아하게 해결하기 위해 등장했다. 예시는 생략하겠다.

* 안티 패턴
추가로 Optional을 사용하면서 주의해야 할 안티 패턴을 소개한다. 디자인 패턴이라는 말을 들어 본 적이 있을 것이다. 이것은 소프트웨어 개발 과정에서 자주 나타나는 문제 해결 방법 중 다른 분야에서도
재사용하기 좋은 코드의 패턴을 모아 이름을 붙인 것이다. 안티 패턴은 이와 반대로 소프트웨어 개발 과정에서 자주 나타나지만, 비효율적이거나 생산적이지 않은 패턴을 의미한다. 안티 패턴은 주로 코드의 가독성을 떨어뜨리거나
성능상 심각한 손실을 유발하므로 지양해야 한다. 다음은 대표적인 안티 패턴 중 하나이다. isPresent() 메서드를 마치 if 문처럼 잘못 사용한 사례이다.

  ex) public class Main {
        private static Optional<String> getSomeString() {
          return Optional.ofNullable("public static void");
      }

      public static void main(String[] args) {
        Optional<String> str = getSomeString();

      if(str.isPresent()) {
        System.out.println(str.get().toUpperCase());
      }
  }
}

이 안티 패턴 코드를 동일한 동작을 하면서도 Optional을 제대로 사용하는 코드로 바꾸면 다음과 같다.

public class Main {
        private static Optional<String> getSomeString() {
          return Optional.ofNullable("public static void");
      }

      public static void main(String[] args) {
        Optional<String> str = getSomeString();

       str.ifPresent((string) -> System.out.println(string.toUpperCase()));
    }
}
